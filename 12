def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg1, arg2)
        var13 = func4(var9, arg4)
        var24 = var16(arg1, var9)
        var25 = func11()
        var26 = arg1 + arg4 & -545345518 ^ var9
        var27 = var13 | arg1 + -644317981 & var9
        var28 = var13 + arg3 & arg1 + arg3
        var29 = var27 & arg4 - var27 + -558
        var30 = var28 + var9
        var31 = var9 & var9 | var9 | arg3
        var32 = (var13 ^ -305) - arg1 - var28
        var33 = -497 - var13
        var34 = ((var13 | -204643766) + var29) & var33
        var35 = var34 & arg2 | -427 ^ arg2
        var36 = 1458047418 & (var26 + var29) - var31
        var37 = arg3 + var31 ^ var28 + arg2
        if var30 < var24:
            var38 = var32 + 614
        else:
            var38 = var35 & arg4 - var26
        var39 = 1252062934 ^ var26 & var25 | var33
        var40 = var24 | arg1 | arg3 & var39
        var41 = var25 ^ var30
        var42 = (var36 ^ arg1) ^ var24 + arg1
        var43 = ((var42 & var28) ^ var35) | var37
        var44 = var43 & var28 - -706
        var45 = var29 + var42 | var31
        if var9 < var34:
            var46 = 264 - ((1140623891 + 684706707) + var31)
        else:
            var46 = arg1 & var29 | var34 | var41
        if var31 < var13:
            var47 = (var44 + var39 | var9) ^ var43
        else:
            var47 = arg3 - (var31 | var33 ^ var40)
        var48 = arg1 | var37 ^ var41 | var44
        result = var39 ^ var42
        return result
    var49 = func2(arg1, arg2)
    var50 = ((var49 & (var49 & (var49 - arg1))) - -1587733292 + arg1) | (var49 + -507925391 | arg2) + 58
    var51 = arg2 ^ ((var50 | arg2) - 507788555 + (var50 & arg1) - 307) & var49 ^ -293 + arg1 & arg2
    var52 = (var51 - var50) - var50
    result = -1585667046 & var52 & -630 + var51 ^ var49
    return result
def func11():
    func9()
    result = len(range(16))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 3
def func8(arg17, arg18):
    var19 = arg18 ^ 1061753397 ^ arg17
    var20 = 1909097309 & (arg18 & 884)
    var21 = (-445 & (-1000 & -919)) | (arg17 - ((((var19 - (-80 & var20 | -618)) - var20 & arg18) & 830) & -1707907984 & -49) & -2140908375)
    var22 = ((-517 - var21) & arg17) ^ 113722292
    var23 = var22 - arg17
    result = arg17 + var23 - (246237160 ^ ((arg18 | -1934834343) ^ var20)) | (var22 | ((arg18 & var20) + var21 - 202024735 + var22))
    return result
def func7():
    closure = [3]
    def func6(arg14, arg15):
        closure[0] += func8(arg14, arg15)
        return closure[0]
    func = func6
    return func
var16 = func7()
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(17):
        var7 += var7 + 3
    return var7
def func4(arg10, arg11):
    def func5(acc, rest):
        var12 = acc & -1
        if acc == 0:
            return var12
        else:
            result = func5(acc - 1, var12)
            return result
    result = func5(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg1, arg2)
        var13 = func4(var9, arg4)
        var24 = var16(arg1, var9)
        var25 = func11()
        var26 = arg1 + arg4 & -545345518 ^ var9
        var27 = var13 | arg1 + -644317981 & var9
        var28 = var13 + arg3 & arg1 + arg3
        var29 = var27 & arg4 - var27 + -558
        var30 = var28 + var9
        var31 = var9 & var9 | var9 | arg3
        var32 = (var13 ^ -305) - arg1 - var28
        var33 = -497 - var13
        var34 = ((var13 | -204643766) + var29) & var33
        var35 = var34 & arg2 | -427 ^ arg2
        var36 = 1458047418 & (var26 + var29) - var31
        var37 = arg3 + var31 ^ var28 + arg2
        if var30 < var24:
            var38 = var32 + 614
        else:
            var38 = var35 & arg4 - var26
        var39 = 1252062934 ^ var26 & var25 | var33
        var40 = var24 | arg1 | arg3 & var39
        var41 = var25 ^ var30
        var42 = (var36 ^ arg1) ^ var24 + arg1
        var43 = ((var42 & var28) ^ var35) | var37
        var44 = var43 & var28 - -706
        var45 = var29 + var42 | var31
        if var9 < var34:
            var46 = 264 - ((1140623891 + 684706707) + var31)
        else:
            var46 = arg1 & var29 | var34 | var41
        if var31 < var13:
            var47 = (var44 + var39 | var9) ^ var43
        else:
            var47 = arg3 - (var31 | var33 ^ var40)
        var48 = arg1 | var37 ^ var41 | var44
        result = var39 ^ var42
        return result
    var49 = func2(arg1, arg2)
    var50 = ((var49 & (var49 & (var49 - arg1))) - -1587733292 + arg1) | (var49 + -507925391 | arg2) + 58
    var51 = arg2 ^ ((var50 | arg2) - 507788555 + (var50 & arg1) - 307) & var49 ^ -293 + arg1 & arg2
    var52 = (var51 - var50) - var50
    result = -1585667046 & var52 & -630 + var51 ^ var49
    return result
def func11():
    func9()
    result = len(range(16))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 3
def func8(arg17, arg18):
    var19 = arg18 ^ 1061753397 ^ arg17
    var20 = 1909097309 & (arg18 & 884)
    var21 = (-445 & (-1000 & -919)) | (arg17 - ((((var19 - (-80 & var20 | -618)) - var20 & arg18) & 830) & -1707907984 & -49) & -2140908375)
    var22 = ((-517 - var21) & arg17) ^ 113722292
    var23 = var22 - arg17
    result = arg17 + var23 - (246237160 ^ ((arg18 | -1934834343) ^ var20)) | (var22 | ((arg18 & var20) + var21 - 202024735 + var22))
    return result
def func7():
    closure = [3]
    def func6(arg14, arg15):
        closure[0] += func8(arg14, arg15)
        return closure[0]
    func = func6
    return func
var16 = func7()
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(17):
        var7 += var7 + 3
    return var7
def func4(arg10, arg11):
    def func5(acc, rest):
        var12 = acc & -1
        if acc == 0:
            return var12
        else:
            result = func5(acc - 1, var12)
            return result
    result = func5(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg1, arg2)
        var13 = func4(var9, arg4)
        var24 = var16(arg1, var9)
        var25 = func11()
        var26 = arg1 + arg4 & -545345518 ^ var9
        var27 = var13 | arg1 + -644317981 & var9
        var28 = var13 + arg3 & arg1 + arg3
        var29 = var27 & arg4 - var27 + -558
        var30 = var28 + var9
        var31 = var9 & var9 | var9 | arg3
        var32 = (var13 ^ -305) - arg1 - var28
        var33 = -497 - var13
        var34 = ((var13 | -204643766) + var29) & var33
        var35 = var34 & arg2 | -427 ^ arg2
        var36 = 1458047418 & (var26 + var29) - var31
        var37 = arg3 + var31 ^ var28 + arg2
        if var30 < var24:
            var38 = var32 + 614
        else:
            var38 = var35 & arg4 - var26
        var39 = 1252062934 ^ var26 & var25 | var33
        var40 = var24 | arg1 | arg3 & var39
        var41 = var25 ^ var30
        var42 = (var36 ^ arg1) ^ var24 + arg1
        var43 = ((var42 & var28) ^ var35) | var37
        var44 = var43 & var28 - -706
        var45 = var29 + var42 | var31
        if var9 < var34:
            var46 = 264 - ((1140623891 + 684706707) + var31)
        else:
            var46 = arg1 & var29 | var34 | var41
        if var31 < var13:
            var47 = (var44 + var39 | var9) ^ var43
        else:
            var47 = arg3 - (var31 | var33 ^ var40)
        var48 = arg1 | var37 ^ var41 | var44
        result = var39 ^ var42
        return result
    var49 = func2(arg1, arg2)
    var50 = ((var49 & (var49 & (var49 - arg1))) - -1587733292 + arg1) | (var49 + -507925391 | arg2) + 58
    var51 = arg2 ^ ((var50 | arg2) - 507788555 + (var50 & arg1) - 307) & var49 ^ -293 + arg1 & arg2
    var52 = (var51 - var50) - var50
    result = -1585667046 & var52 & -630 + var51 ^ var49
    return result
def func11():
    func9()
    result = len(range(16))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 3
def func8(arg17, arg18):
    var19 = arg18 ^ 1061753397 ^ arg17
    var20 = 1909097309 & (arg18 & 884)
    var21 = (-445 & (-1000 & -919)) | (arg17 - ((((var19 - (-80 & var20 | -618)) - var20 & arg18) & 830) & -1707907984 & -49) & -2140908375)
    var22 = ((-517 - var21) & arg17) ^ 113722292
    var23 = var22 - arg17
    result = arg17 + var23 - (246237160 ^ ((arg18 | -1934834343) ^ var20)) | (var22 | ((arg18 & var20) + var21 - 202024735 + var22))
    return result
def func7():
    closure = [3]
    def func6(arg14, arg15):
        closure[0] += func8(arg14, arg15)
        return closure[0]
    func = func6
    return func
var16 = func7()
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(17):
        var7 += var7 + 3
    return var7
def func4(arg10, arg11):
    def func5(acc, rest):
        var12 = acc & -1
        if acc == 0:
            return var12
        else:
            result = func5(acc - 1, var12)
            return result
    result = func5(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg1, arg2)
        var13 = func4(var9, arg4)
        var24 = var16(arg1, var9)
        var25 = func11()
        var26 = arg1 + arg4 & -545345518 ^ var9
        var27 = var13 | arg1 + -644317981 & var9
        var28 = var13 + arg3 & arg1 + arg3
        var29 = var27 & arg4 - var27 + -558
        var30 = var28 + var9
        var31 = var9 & var9 | var9 | arg3
        var32 = (var13 ^ -305) - arg1 - var28
        var33 = -497 - var13
        var34 = ((var13 | -204643766) + var29) & var33
        var35 = var34 & arg2 | -427 ^ arg2
        var36 = 1458047418 & (var26 + var29) - var31
        var37 = arg3 + var31 ^ var28 + arg2
        if var30 < var24:
            var38 = var32 + 614
        else:
            var38 = var35 & arg4 - var26
        var39 = 1252062934 ^ var26 & var25 | var33
        var40 = var24 | arg1 | arg3 & var39
        var41 = var25 ^ var30
        var42 = (var36 ^ arg1) ^ var24 + arg1
        var43 = ((var42 & var28) ^ var35) | var37
        var44 = var43 & var28 - -706
        var45 = var29 + var42 | var31
        if var9 < var34:
            var46 = 264 - ((1140623891 + 684706707) + var31)
        else:
            var46 = arg1 & var29 | var34 | var41
        if var31 < var13:
            var47 = (var44 + var39 | var9) ^ var43
        else:
            var47 = arg3 - (var31 | var33 ^ var40)
        var48 = arg1 | var37 ^ var41 | var44
        result = var39 ^ var42
        return result
    var49 = func2(arg1, arg2)
    var50 = ((var49 & (var49 & (var49 - arg1))) - -1587733292 + arg1) | (var49 + -507925391 | arg2) + 58
    var51 = arg2 ^ ((var50 | arg2) - 507788555 + (var50 & arg1) - 307) & var49 ^ -293 + arg1 & arg2
    var52 = (var51 - var50) - var50
    result = -1585667046 & var52 & -630 + var51 ^ var49
    return result
def func11():
    func9()
    result = len(range(16))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 3
def func8(arg17, arg18):
    var19 = arg18 ^ 1061753397 ^ arg17
    var20 = 1909097309 & (arg18 & 884)
    var21 = (-445 & (-1000 & -919)) | (arg17 - ((((var19 - (-80 & var20 | -618)) - var20 & arg18) & 830) & -1707907984 & -49) & -2140908375)
    var22 = ((-517 - var21) & arg17) ^ 113722292
    var23 = var22 - arg17
    result = arg17 + var23 - (246237160 ^ ((arg18 | -1934834343) ^ var20)) | (var22 | ((arg18 & var20) + var21 - 202024735 + var22))
    return result
def func7():
    closure = [3]
    def func6(arg14, arg15):
        closure[0] += func8(arg14, arg15)
        return closure[0]
    func = func6
    return func
var16 = func7()
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(17):
        var7 += var7 + 3
    return var7
def func4(arg10, arg11):
    def func5(acc, rest):
        var12 = acc & -1
        if acc == 0:
            return var12
        else:
            result = func5(acc - 1, var12)
            return result
    result = func5(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg1, arg2)
        var13 = func4(var9, arg4)
        var24 = var16(arg1, var9)
        var25 = func11()
        var26 = arg1 + arg4 & -545345518 ^ var9
        var27 = var13 | arg1 + -644317981 & var9
        var28 = var13 + arg3 & arg1 + arg3
        var29 = var27 & arg4 - var27 + -558
        var30 = var28 + var9
        var31 = var9 & var9 | var9 | arg3
        var32 = (var13 ^ -305) - arg1 - var28
        var33 = -497 - var13
        var34 = ((var13 | -204643766) + var29) & var33
        var35 = var34 & arg2 | -427 ^ arg2
        var36 = 1458047418 & (var26 + var29) - var31
        var37 = arg3 + var31 ^ var28 + arg2
        if var30 < var24:
            var38 = var32 + 614
        else:
            var38 = var35 & arg4 - var26
        var39 = 1252062934 ^ var26 & var25 | var33
        var40 = var24 | arg1 | arg3 & var39
        var41 = var25 ^ var30
        var42 = (var36 ^ arg1) ^ var24 + arg1
        var43 = ((var42 & var28) ^ var35) | var37
        var44 = var43 & var28 - -706
        var45 = var29 + var42 | var31
        if var9 < var34:
            var46 = 264 - ((1140623891 + 684706707) + var31)
        else:
            var46 = arg1 & var29 | var34 | var41
        if var31 < var13:
            var47 = (var44 + var39 | var9) ^ var43
        else:
            var47 = arg3 - (var31 | var33 ^ var40)
        var48 = arg1 | var37 ^ var41 | var44
        result = var39 ^ var42
        return result
    var49 = func2(arg1, arg2)
    var50 = ((var49 & (var49 & (var49 - arg1))) - -1587733292 + arg1) | (var49 + -507925391 | arg2) + 58
    var51 = arg2 ^ ((var50 | arg2) - 507788555 + (var50 & arg1) - 307) & var49 ^ -293 + arg1 & arg2
    var52 = (var51 - var50) - var50
    result = -1585667046 & var52 & -630 + var51 ^ var49
    return result
def func11():
    func9()
    result = len(range(16))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 3
def func8(arg17, arg18):
    var19 = arg18 ^ 1061753397 ^ arg17
    var20 = 1909097309 & (arg18 & 884)
    var21 = (-445 & (-1000 & -919)) | (arg17 - ((((var19 - (-80 & var20 | -618)) - var20 & arg18) & 830) & -1707907984 & -49) & -2140908375)
    var22 = ((-517 - var21) & arg17) ^ 113722292
    var23 = var22 - arg17
    result = arg17 + var23 - (246237160 ^ ((arg18 | -1934834343) ^ var20)) | (var22 | ((arg18 & var20) + var21 - 202024735 + var22))
    return result
def func7():
    closure = [3]
    def func6(arg14, arg15):
        closure[0] += func8(arg14, arg15)
        return closure[0]
    func = func6
    return func
var16 = func7()
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(17):
        var7 += var7 + 3
    return var7
def func4(arg10, arg11):
    def func5(acc, rest):
        var12 = acc & -1
        if acc == 0:
            return var12
        else:
            result = func5(acc - 1, var12)
            return result
    result = func5(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
